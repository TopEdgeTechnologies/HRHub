@model HRHUBAPI.Models.Staff

<style>
.select2-container 
{
    width: 100% !important;
}
</style>

<div class="side-app main-container">

    <!-- Row -->    
    @using (Html.BeginForm("StaffCreateOrUpdate", "Staff", FormMethod.Post, new { @id = "myform", enctype = "multipart/form-data" }))
    {
        <input type="hidden" id="LeaveDetailRowNo" />
        <input type="hidden" id="AttachmentDetailRowNo" />
        <input type="hidden" asp-for="StaffId" />
        <input type="hidden" asp-for="CompanyId" value="@ViewBag.CompanyId" />

        <div class="row">
            <div class="col-xl-3 col-md-12 col-lg-12">
                <div class="card box-widget widget-user">
                    <div class="card-body text-center">
                        <div class="widget-user-image mx-auto text-center">
                            @{
                                string pathfile = Model.SnapPath != null ? Model.SnapPath : " /Images/Avatar.png";
                            }
                            <img class="avatar avatar-xxl brround rounded-circle" id="viewUserImage" alt="user-img" src="@pathfile">
@*                            <input name="StaffImageAttachmentFile" accept=".jpg, .jpeg, .png" id="StaffImageAttachmentFile" class="form-control" type="file" placeholder="Enter Title">*@
                        </div>
                        <div class="pro-user mt-3">
                            @{
                                string fullName = Model.FirstName + ' ' + Model.LastName;
                                string cardName = fullName != null ? fullName : "lbl_FullName";
                            }
                            <h5 id="lbl_FullName" class="pro-user-username text-dark mb-1 fs-16">@cardName</h5>
                            <h6 id="lbl_Designation" class="pro-user-desc text-muted fs-12">Web Designer</h6>
                        </div>
                        <div class="rating-stars stars-example-fontawesome block" id="rating-1" data-stars="2"></div>
                    </div>
                    <div class="card-footer p-0">
                        <div class="row">
                            
                            <div class="col-4 text-center py-5 border-end">
                                <h5 class="fs-12 font-weight-semibold mb-3">@Model.MonthName</h5>
                                <h5 class="mb-2">
                                    <span class="fs-18 text-success">@Model.MTDPresentCount</span>
                                    <span class="my-auto fs-9 font-weight-normal  ms-1 me-1">/</span>
                                    <span class="fs-18 font-weight-semibold text-dark">@Model.MonthDaysCount</span>
                                </h5>
                                <h5 class="fs-12 mb-0">Presents</h5>
                            </div>
                            <div class="col-4  py-5 text-center border-end">
                                <h5 class="fs-12 font-weight-semibold mb-3">Year-@Model.Year</h5>
                                <h5 class="mb-2">
                                    <span class="fs-18 text-orange">@Model.YTDPaidLeaveCount</span>
                                    <span class="my-auto fs-9 font-weight-normal  ms-1 me-1">/</span>
                                    <span class="fs-18 font-weight-semibold text-dark">@Model.TotalAllowedLeaves</span>
                                </h5>
                                <h5 class="fs-12 mb-0">Leaves</h5>
                            </div>
                            @*
                            <div class="col-4 text-center py-5">
                                <h5 class="fs-12 font-weight-semibold mb-3">Year-2023</h5>
                                <h5 class="mb-2">
                                    <span class="fs-18 text-primary">23</span>
                                </h5>
                                <h5 class="fs-12 mb-0">Absents</h5>
                            </div>
                        *@
                        </div>
                    </div>
                </div>
                @*
                <div class="card">
                    <div class="card-header  border-0">
                        <div class="card-title">Statistics-2023</div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-7">
                            <div class="col-4 text-center">
                                <div class="chart-circle chart-circle-sm" data-value="0.00" data-thickness="5" data-color="#3366ff">
                                    <div class="chart-circle-value text-primary">0</div>
                                </div>
                                <h6 class="fs-14 font-weight-semibold mt-3">Attendance</h6>
                            </div>
                            <div class="col-4 text-center">
                                <div class="chart-circle chart-circle-sm" data-value="0.00" data-thickness="5" data-color="#fe7f00">
                                    <div class="chart-circle-value text-secondary">0</div>
                                </div>
                                <h6 class="fs-14 font-weight-semibold mt-3">Projects</h6>
                            </div>
                            <div class="col-4 text-center">
                                <div class="chart-circle chart-circle-sm" data-value="0.00" data-thickness="5" data-color="#0dcd94">
                                    <div class="chart-circle-value text-success">0%</div>
                                </div>
                                <h6 class="fs-14 font-weight-semibold mt-3">Performance</h6>
                            </div>
                        </div>
                        <div class="d-flex align-items-end justify-content-between mg-b-5">
                            <h6 class="">This Week</h6>
                            <h6 class="font-weight-bold mb-1">0</h6>
                        </div>
                        <div class="progress progress-sm mb-5">
                            <div class="progress-bar bg-danger w-0"></div>
                        </div>
                        <div class="d-flex align-items-end justify-content-between mg-b-5">
                            <h6 class="">This Month</h6>
                            <h6 class="font-weight-bold mb-1">0</h6>
                        </div>
                        <div class="progress progress-sm mb-5">
                            <div class="progress-bar bg-info w-0"></div>
                        </div>
                        <div class="d-flex align-items-end justify-content-between mg-b-5">
                            <h6 class="">This Year</h6>
                            <h6 class="font-weight-bold mb-1">0</h6>
                        </div>
                        <div class="progress progress-sm mb-5">
                            <div class="progress-bar bg-warning w-0"></div>
                        </div>
                    </div>
                </div>
                *@
            </div>
            <div class="col-xl-9 col-md-12 col-lg-12">
                <div class="tab-menu-heading hremp-tabs p-0 ">
                    <div class="tabs-menu1">
                        <!-- Tabs -->
                        <ul class="nav panel-tabs">
                            <li class="ms-4"><a href="#tab5" class="active" data-bs-toggle="tab">Personal Info</a></li>
                            <li><a href="#tab6" data-bs-toggle="tab">Company Details</a></li>
                            <li><a href="#tab7" data-bs-toggle="tab">Salary Info</a></li>
                            <li><a href="#tab8" data-bs-toggle="tab">Leave Details</a></li>
                            <li><a href="#tab10" data-bs-toggle="tab">Documents</a></li>
                        </ul>
                    </div>
                </div>
                <div class="panel-body tabs-menu-body hremp-tabs1 p-0">
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab5">
                            <div class="card-body">
                                <h4 class="mb-4 font-weight-bold">Basic</h4>
                                @{
                                    async Task doubleWidget(string labelTitle, object fieldName1, string? fieldValue1, string placeholderTitle1, object fieldName2, string? fieldValue2, string placeholderTitle2, string fieldValueType, bool isMandatory)
                                    {
                                        <div class="form-group ">
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <label class="form-label mb-0 mt-2">
                                                        @labelTitle
                                                        @{
                                                            string required = "";
                                                            if (@isMandatory == true)
                                                            {
                                                                <span class="text-danger">*</span>
                                                                required = "required";
                                                            }
                                                        }
                                                    </label>
                                                </div>
                                                <div class="col-md-9">
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <input id=@fieldName1 name="@fieldName1" value="@fieldValue1" type="@fieldValueType" @required class="form-control mb-md-0 mb-5" placeholder="@placeholderTitle1">
                                                            <span class="text-muted"></span>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <input id=@fieldName2 name="@fieldName2" value="@fieldValue2" type="@fieldValueType" @required class="form-control" placeholder="@placeholderTitle2">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    async Task textWidget(string labelTitle, object fieldName, string? fieldValue, string placeholderTitle, string fieldValueType, bool isMandatory)
                                    {
                                        <div class="form-group ">
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <label class="form-label mb-0 mt-2">
                                                        @labelTitle
                                                        @{
                                                            string required = "";
                                                            if (@isMandatory == true)
                                                            {
                                                                <span class="text-danger">*</span>
                                                                required = "required";
                                                            }
                                                        }
                                                    </label>
                                                </div>
                                                <div class="col-md-9">
                                                    <input id=@fieldName name="@fieldName" value="@fieldValue" type="@fieldValueType" @required class="form-control" placeholder="@placeholderTitle">
                                                </div>
                                            </div>
                                        </div>
                                    
                                    }

                                    async Task textareaWidget(string labelTitle, object fieldName, string? fieldValue, string placeholderTitle, bool isMandatory)
                                    {
                                        <div class="form-group ">
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <label class="form-label mb-0 mt-2">
                                                        @labelTitle
                                                        @{
                                                            string required = "";
                                                            if (isMandatory == true)
                                                            {
                                                                <span class="text-danger">*</span>
                                                                required = "required";
                                                            }
                                                        }
                                                    </label>
                                                </div>
                                                <div class="col-md-9">
                                                    <textarea id=@fieldName name="@fieldName" value="@fieldValue" rows="3" @required class="form-control" placeholder="@placeholderTitle">@fieldValue</textarea>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    async Task datePickerWidget(string labelTitle, object fieldName, DateTime? fieldValue, string placeholderTitle, string fieldValueType, bool isMandatory)
                                    {
                                        <div class="form-group ">
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <label class="form-label mb-0 mt-2">
                                                    @labelTitle
                                                        @{
                                                            string required = "";
                                                            if (isMandatory == true)
                                                            {
                                                                <span class="text-danger">*</span>
                                                                required = "required";
                                                            }
                                                        }
                                                    </label>
                                                </div>
                                                <div class="col-md-9">
                                                    <input id=@fieldName name="@fieldName" value="@fieldValue" type="@fieldValueType" @required class="form-control fc-datepicker" placeholder="DD-MMM-YYY">
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    async Task radioParentGroupWidget(string labelTitle)
                                    {
                                         <div class="form-group ">
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <label class="form-label">@labelTitle</label>
                                                </div>
                                                <div class="col-md-9">
                                                    <div class="custom-controls-stacked d-md-flex">
                                                        @{
                                                            await radioWidget("Male", "Gender", "Male", Model.Gender);
                                                            await radioWidget("Female", "Gender", "Female", Model.Gender);
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    async Task radioWidget(string labelTitle, string fieldName, string fieldValue, string? selectedValue)
                                    {
                                        <label class="custom-control custom-radio me-4">
                                            <input id="Group_@fieldName@fieldValue" name="@fieldName" type="radio" class="custom-control-input" value="@fieldValue" @(fieldValue == selectedValue ? "checked" : "")>
                                            <span class="custom-control-label">@labelTitle</span>
                                        </label>
                                    }
                      
                                    async Task dropdownWidget(string labelTitle, object fieldName, string? fieldValue, string placeholderTitle, bool isMandatory, IEnumerable<SelectListItem> items, bool databaseBinded)
                                    {
                                        <div class="form-group">
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <label class="form-label mb-0 mt-2">
                                                        @labelTitle
                                                        @{
                                                            string required = "";
                                                            if (isMandatory == true)
                                                            {
                                                                <span class="text-danger">*</span>
                                                                required = "required";
                                                            }
                                                        }
                                                    </label>
                                                </div>
                                                <div class="col-md-9">
                                                    <select id="@fieldName" name="@fieldName" @(required) class="form-control custom-select select2" data-placeholder="@placeholderTitle">
                                                        <option value="">Select</option>
                                                        @foreach (var item in items)
                                                        {
                                                            if(databaseBinded == true)
                                                            {
                                                                if(item.Value == fieldValue)
                                                                {
                                                                    <option value="@item.Value" selected>@item.Text</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@item.Value" >@item.Text</option>
                                                                }
                                                            }
                                                            else if(databaseBinded == false)
                                                            {
                                                                if(item.Text == fieldValue)
                                                                {
                                                                    <option value="@item.Text" selected >@item.Text</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@item.Text" >@item.Text</option>
                                                                }
                                                            }
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    async Task checkboxWidget(string labelTitle, object fieldName, bool fieldValue, bool isMandatory)
                                    {
                                        <div class="form-group mt-7">
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <label class="form-label">
                                                        @labelTitle
                                                        @{
                                                            string required = "";
                                                            if (isMandatory == true)
                                                            {
                                                                <span class="text-danger">*</span>
                                                                required = "required";
                                                            }
                                                        }
                                                    </label>
                                                </div>
                                                <div class="col-md-9">
                                                    <label class="custom-switch">
                                                        <input id="@fieldName" name="@fieldName" type="checkbox" @(isMandatory ? "required" : "") value="@fieldValue" checked="@fieldValue" class="custom-switch-input">
                                                        <span class="custom-switch-indicator"></span>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                  
                                }
                                
                                @{
                                    await doubleWidget("Name", "FirstName", Model.FirstName, "First Name", "LastName", Model.LastName, "Last Name", "text", true);
                                    await textWidget("Parents Name", "FatherName", Model.FatherName, "Parents or Guardian Name", "text", true);
                                    await textWidget("National Id Number", "NationalIdnumber", Model.NationalIdnumber, "National Idendity Number", "text", true);
                                    await doubleWidget("Contact Number", "ContactNumber1", Model.ContactNumber1, "Contact Number 1", "ContactNumber2", Model.ContactNumber2, "Contact Number 2", "number", true);
                                    await doubleWidget("Emergency Contact Number", "EmergencyContact1", Model.EmergencyContact1, "Emergency Contact Number 1", "EmergencyContact2", Model.EmergencyContact2, "Emergency Contact Number 2", "number", false);
                                    await datePickerWidget("Date Of Birth", "Dob", Model.Dob, "DD-MM-YYY", "text", false);
                                    await radioParentGroupWidget("Gender");                                    
                                    
                                    if(Model.MaterialStatusList != null && Model.MaterialStatusList.Count() > 0)
                                    {
                                        await dropdownWidget("Material Status", "MaterialStatus", Model.MaterialStatus, "Select Material Status", false, Model.MaterialStatusList, false);
                                    }

                                    if(Model.BloodGroupList != null && Model.BloodGroupList.Count() > 0)
                                    {
                                        await dropdownWidget("Blood Group", "BloodGroup", Model.BloodGroup, "Select Blood Group", false, Model.BloodGroupList, false);
                                    }

                                    await textWidget("Email", "Email", Model.Email, "Email", "text", false);
                                    await textareaWidget("Present Address", "PresentAddress", Model.PresentAddress, "Enter Present Address", true);
                                    await textareaWidget("Permanent Address", "PermanentAddress", Model.PermanentAddress, "Enter Permanent Address", false);
                                    
                                }                                
                                
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="form-label mb-0 mt-2">Upload Photo</div>
                                        </div>
                                        <div class="col-md-9">
                                            <div class="form-group">
                                                <label for="form-label" class="form-label"></label>
                                                <input name="StaffImageAttachmentFile" accept=".jpg, .jpeg, .png" id="StaffImageAttachmentFile" class="form-control" type="file" placeholder="Enter Title">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <h4 class="mb-5 mt-7 font-weight-bold">Account Login</h4>
                            </div>
                        </div>
                        <div class="tab-pane" id="tab6">
                            <div class="card-body">
                                @*
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Staff Registration #</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="RegistrationNo" type="text" required class="form-control" placeholder="Registration Number">
                            </div>
                            </div>
                            </div>
                                 <div class="form-group">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <label class="form-label mb-0 mt-2">Department<span class="text-danger">*</span></label>
                                        </div>
                                        <div class="col-md-9">
                                           <select asp-for=DepartmentId id="DepartmentId" class="form-control custom-select select2" required data-placeholder="Select Department" asp-items="@(new SelectList(@ViewBag.ObjDepartmentList,"DepartmentId", "Title"))">
                                                <option label="Select Department"></option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                               
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <label class="form-label mb-0 mt-2">Designation<span class="text-danger">*</span></label>
                                        </div>
                                        <div class="col-md-9">
                                            <select asp-for=DesignationId id="DesignationId" required onchange="onchangeDesignation()" class="form-control custom-select select2" data-placeholder="Select Designation" asp-items="@(new SelectList(@ViewBag.ObjDesignationList,"DesignationId", "Title"))">
                                                <option label="Select Designation"></option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Job Title<span class="text-danger">*</span></label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="JobTitle" type="text" required class="form-control" placeholder="Describe Staff Job Title">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Job Description</label>
                            </div>
                            <div class="col-md-9">
                            <textarea asp-for="JobDescription" rows="3" class="form-control" placeholder="Job Description"></textarea>
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Date Of Joining</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="JoiningDate" type="text" class="form-control fc-datepicker" placeholder="DD-MM-YYY">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Resignation Date</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="ResigningDate" type="text" class="form-control fc-datepicker" placeholder="DD-MM-YYY">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Termination Date</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="TerminationDate" type="text" class="form-control fc-datepicker" placeholder="DD-MM-YYY">
                            </div>
                            </div>
                            </div>

                            <div class="form-group mt-7">
                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="form-label">Status:</label>
                                    </div>
                                    <div class="col-md-9">
                                        <label class="custom-switch">
                                            <input asp-for=Status type="checkbox" onchange="StaffStatusChange()" class="custom-switch-input">
                                            <span class="custom-switch-indicator"></span>
                                            <span id="lbl_StaffStatus" class="custom-switch-description">Active/Inactive</span>
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Account Holder</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="AccountTitle" type="text" class="form-control" placeholder="Name">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Account Number</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="BankAccountNumber" type="text" class="form-control" placeholder="Number">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Bank Name</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="BankName" type="text" class="form-control" placeholder="Name">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Branch Location</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="BankLocation" type="text" class="form-control" placeholder="Location">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">
                            Bank Code (IFSC)
                            <span class="form-help" data-bs-toggle="tooltip" data-bs-placement="top" title="Bank Identify Number in your Country">?</span>
                            </label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="BankCode" type="text" class="form-control" placeholder="Code">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">
                            Tax Payer ID (PAN)
                            <span class="form-help" data-bs-toggle="tooltip" data-bs-placement="top" title="Taxpayer Identification Number Used in your Country">?</span>
                            </label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for="TaxPayerNumber" type="text" class="form-control" placeholder="ID No">
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Salary Method</label>
                            </div>
                            <div class="col-md-9">
                            <select asp-for=SalaryMethodId id="SalaryMethodId" class="form-control custom-select select2" data-placeholder="Select Salary Method" asp-items="@(new SelectList(@ViewBag.ObjSalaryMethodList,"SalaryMethodId", "Title"))">
                            <option label="Select Salary Method"></option>
                            </select>
                            </div>
                            </div>
                            </div>
                            <div class="form-group">
                            <div class="row">
                            <div class="col-md-3">
                            <label class="form-label mb-0 mt-2">Gross Salary</label>
                            </div>
                            <div class="col-md-9">
                            <input asp-for=SalaryAmount type="number" class="form-control" placeholder="$Salary">
                            </div>
                            </div>
                            </div>
                                *@
                                @{
                                    await textWidget("Staff Registration #", "RegistrationNo", Model.RegistrationNo, "Registration Number", "text", true);

                                    if (Model.DepartmentList != null && Model.DepartmentList.Count() > 0)
                                    {
                                        IEnumerable<SelectListItem> departmentItems = Model.DepartmentList.Select(d => new SelectListItem { Value = d.DepartmentId.ToString(), Text = d.Title });
                                        await dropdownWidget("Department", "DepartmentId", Model.DepartmentId.ToString(), "Select Department", true, departmentItems, true);
                                    }

                                    if (Model.DesignationList != null && Model.DesignationList.Count() > 0)
                                    {
                                        IEnumerable<SelectListItem> designationItems = Model.DesignationList.Select(d => new SelectListItem { Value = d.DesignationId.ToString(), Text = d.Title });
                                        await dropdownWidget("Designation", "DesignationId", Model.DesignationId.ToString(), "Select Designation", true, designationItems, true);
                                    }

                                    await textWidget("Job Title", "JobTitle", Model.JobTitle, "Describe Staff Job Title", "text", true);
                                    await textareaWidget("Job Description", "JobDescription", Model.JobDescription, "Job Description", true);
                                    await datePickerWidget("Date Of Joining", "JoiningDate", Model.JoiningDate, "DD-MM-YYY", "text", false);
                                    //await datePickerWidget("Resigning Date", "ResigningDate", Model.ResigningDate, "DD-MM-YYY", "text", false);
                                    //await datePickerWidget("Termination Date", "TerminationDate", Model.TerminationDate, "DD-MM-YYY", "text", false);
                                    await checkboxWidget("Status:", "Status", Model.Status, false);
                                }


                                <h4 class="mb-5 mt-7 font-weight-bold">Bank Details</h4>
                                @{
                                    await textWidget("Account Holder", "AccountTitle", Model.AccountTitle, "Enter Bank Account Title", "text", false);
                                    await textWidget("Account Number", "BankAccountNumber", Model.BankAccountNumber, "Enter Bank Account Number", "text", false);
                                    await textWidget("Bank Name", "BankName", Model.BankName, "Enter Bank Name", "text", false);
                                    await textWidget("Branch Location", "BankLocation", Model.BankLocation, "Enter Branch Location", "text", false);
                                    await textWidget("Bank Code (IFSC)", "BankCode", Model.BankCode, "Bank Identify Number in your Country", "text", false);
                                    await textWidget("Tax Payer ID (PAN)", "TaxPayerNumber", Model.TaxPayerNumber, "Taxpayer Identification Number Used in your Country", "text", false);
                                }
                            </div>
                        </div>                
                        <div class="tab-pane" id="tab7">
                            <div class="card-body">
                                @{
                                    if (Model.SalaryMethodList != null && Model.SalaryMethodList.Count() > 0)
                                    {
                                        IEnumerable<SelectListItem> salaryMethodItems = Model.SalaryMethodList.Select(d => new SelectListItem { Value = d.SalaryMethodId.ToString(), Text = d.Title });
                                        await dropdownWidget("SalaryMethod", "SalaryMethodId", Model.SalaryMethodId?.ToString(), "Select Salary Method", false , salaryMethodItems, true);
                                    }
                                    await textWidget("Gross Salary", "SalaryAmount", Model.SalaryAmount.ToString(), "$Salary", "number", false);
                                }
                               
                                
                                <div>
                                    <h4 class="mb-4 font-weight-bold">Salary Breakup
                                        <span id="lbl_Earning" class="fs-18 text-success">0</span>
                                        <span id="lbl_EarningPercenage" class="fs-18 text-success">0</span>
                                    </h4>
                                    <table id="StaffEarningTable" class="table table-vcenter text-nowrap table-bordered border-bottom">
                                            <thead>
                                                 <tr>
                                                    <th>Title</th>
                                                    <th style="width:40px">Percentage</th>
                                                    <th>Amount</th>
                                                </tr>
                                            </thead>
                                            <tbody id="EarningTableBody">
                                                @{
                                                    int m = 0;
                                                    if (Model.StaffSalaryComponentList != null && Model.StaffSalaryComponentList.Count() > 0)
                                                    {
                                                        foreach (var item in Model.StaffSalaryComponentList.Where(x => x.Category == "Earning"))
                                                        {
                                                            <tr id="row_@m">
                                                                <td>
                                                                    <input type="hidden" id="StaffSalaryComponentId_@m@item.Category" name="StaffSalaryComponentId" value="@item.StaffSalaryComponentId" />
                                                                    <input type="hidden" id="ComponentId_@m@item.Category" name="ListComponentId" value="@item.ComponentId" />
                                                                    <input type="hidden" id="Category_@m@item.Category" name="Category_@item.Category" value="@item.Category" />
                                                                    @item.ComponentTitle
                                                                </td>
                                                                <td>
                                                                    <input type="number" style="padding-left:3px; padding-right:3px" min="0" max="100" class="form-control" id="PercentageValue_@m@item.Category" name="ListComponentPercentageEarning" value="@item.PercentageValue" title="Component Percentage" placeholder="Enter Percentage" oninput="SalaryPercentageExceedLimit('@item.Category')"/>
                                                                </td>
                                                                <td>
                                                                    <input type="number" style="padding-left:3px; padding-right:3px" min="0" class="form-control" id="ComponentAmount_@m@item.Category" name="ListComponentAmountEarning" value="@item.ComponentAmount" title="Component Amount" placeholder="Enter Amount" oninput="SalaryExceedLimit('@item.Category')" />
                                                                </td>
                                                            </tr>
                                                            m++;
                                                        }
                                                    }
                                                }
                                            </tbody>
                                        </table>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="tab8">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-8">
                                    <table id="LeaveTable" class="table  table-vcenter text-nowrap table-bordered border-bottom">
                                        <thead>
                                            <tr>
                                                <th>Sr. #</th>
                                                <th>Leave Type</th>
                                                <th>Max Limit</th>
                                                <th>Allowed Leaves</th>
                                            </tr>
                                        </thead>
                                        <tbody id="LeaveTableBody">
                                            @{
                                                int a = 0;
                                                int b = 1;
                                                if(Model.StaffLeaveAllocationslist != null && Model.StaffLeaveAllocationslist.Count() > 0)
                                                {
                                                    foreach(var item in Model.StaffLeaveAllocationslist)
                                                    {
                                                        <tr id="@a">
                                                            <td>@b</td>
                                                            <td>
                                                                <input type="hidden" id="LeaveAllocationId_@a" name="LeaveAllocationId" value="@item.LeaveAllocationId" />
                                                                <input type="hidden" id="LeaveTypeId_@a" name="ListLeaveTypeId" value="@item.LeaveTypeId" />
                                                                @*<input type="text" readonly class="form-control" id="LeaveTypeTitle_@a" name="LeaveTypeTitle" value="@item.LeaveTypeTitle" />*@
                                                                @item.LeaveTypeTitle
                                                            </td>
                                                            <td>
                                                                @*<input type="text" readonly class="form-control" id="NoOfLeavesLimit_@a" name="NoOfLeavesLimit" value="@item.NoOfLeavesLimit" />*@
                                                                @item.NoOfLeavesLimit
                                                            </td>
                                                            <td>
                                                                <input type="number" class="form-control" min="0" max="999" id="AllowedLeaves_@a" onkeydown="LeaveExceedLimit(@a)" name="ListAllowedLeaves" value="@item.AllowedLeaves" />
                                                            </td>
                                                        </tr>
                                                        a++;
                                                        b++;
                                                    }
                                                }
                                            }
                                        </tbody>
                                    </table>

                                   </div>

                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="tab10">
                            <div class="card-body">
                                <div>
                                    <table id="documentTable" class="table  table-vcenter text-nowrap table-bordered border-bottom">
                                        <thead>
                                            <tr>
                                                <th>Sr. #</th>
                                                <th>Document Title</th>
                                                <th>Document Path</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody id="TBodyID1">
                                            @{
                                                int i = 0;
                                                int j = 1;
                                                if (Model.StaffAttachmentList != null && Model.StaffAttachmentList.Count() > 0)
                                                {
                                                    foreach (var item in Model.StaffAttachmentList)
                                                    {
                                                        <tr id="@i">
                                                            <td> @j </td>
                                                            <td> <input type="text" class="form-control " id="DocumentTitle_@i" name="DocumentTitle" value="@item.DocumentTitle" />    </td>
                                                            <td>     <a target="_blank" href="@item.DocumentPath">   <img src="@item.DocumentPath" alt="user-img" id="viewlogo" class="avatar-sm rounded-circle mb-1">  </a>  <input type="hidden" value="@item.DocumentPath" id="DocFile_@i" name="DocumentPath" /> </td>
                                                            <td>
                                                                <button type="button" style="" class="btn btn-info btn-xs btn-circle" id="detailDocDataAdd_@i" value="+" onclick="AddStaffAtachmentData($(this).parent().parent().attr('id'), false)" title="Add"> <span class="fa fa-plus" aria-hidden="true"> </span> <span><strong></strong></span> </button>
                                                                <button type="button" id="detailDocDataDelete_@i" title="Remove" value=" - " onclick="DeleteDocDetailData(this, $(this).parent().parent().attr('id'))" class="btn btn-danger btn-xs btn-circle userDellbtn"> <span class="fa fa-trash" aria-hidden="true"></span> <span><strong></strong></span>  </button>
                                                            </td>
                                                        </tr>
                                                        i++;
                                                        j++;
                                                    }
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer text-end">
                            <input type="button" value="Save" id="btnSaveUpdate" class="btn btn-primary" />
                            <a asp-action="StaffList" asp-controller="Staff" class="btn btn-danger">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <!-- End Row-->

</div><!-- end app-content-->
@*</div>*@


@section scripts{
    <script>
        $(document).ready(function () {

            $('#DepartmentId').select2();
            $('#DesignationId').select2();
            $('#SalaryMethod').select2();

            //StaffStatusChange();

            $('#StaffImageAttachmentFile').change(function () {
                var fileInput = $(this);
                var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
                var fileSizeLimit = 2 * 1024 * 1024; // 2 MB
                var fileSize = this.files[0].size;
                var filePath = fileInput.val();
                if (!allowedExtensions.exec(filePath)) {
                    notif({
                        msg: "<i class='fa fa-check fs-20 me-2'></i><b>Warning:</b> Invalid file type. Please select a JPG, JPEG, or PNG file.",
                        type: "warning"
                    });
                    fileInput.val('');
                    return false;
                } else if (fileSize > fileSizeLimit) {
                    notif({
                        msg: "<i class='fa fa-check fs-20 me-2'></i><b>Warning:</b>' File size exceeds the limit of 2MB.",
                        type: "warning"
                    });
                    fileInput.val('');
                    return false;
                } else {
                    readURL(this)
                }
            });

            // Staff Document Add
            AddStaffAtachmentData(0, true);

            SalaryExceedLimit('Earning');
            onchangeDesignation();

        });
        
        $("#btnSaveUpdate").click(function () {
            debugger
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            });

            if (validateForm()) {
                swalWithBootstrapButtons.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    cancelButtonText: 'No, cancel!',
                    confirmButtonText: 'Yes, Save it!',
                    timer: 30000,
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        $("#myform").submit();
                    }
                    else if (result.dismiss === Swal.DismissReason.cancel) {
                        swalWithBootstrapButtons.fire(
                            'Cancelled',
                            'Your record is safe :)',
                            'error'
                        )
                    }
                });
            }
            else {
                $.growl.warning({
                    message: "Please Enter required fields !"
                });
            }
            // $("#myform").submit();
        });

        $("#viewUserImage").click(function () {
            // Create a hidden file input element
            var input = $("#StaffImageAttachmentFile");
            // input.type = 'file';
            // input.accept = 'image/*';

            // Handle file selection
            input.onchange = function (e) {
                var file = e.target.files[0];
                // Perform further operations with the selected file as needed
                console.log('Selected file:', file);
            };
            // Trigger the file dialog
            input.click();
        });

        $("#FirstName").on("input", function(){
            debugger
            var fullName = $("#FirstName").val() + ' ' + $("#LastName").val()
            $("#lbl_FullName").text(fullName)
            $("#AccountTitle").val(fullName)
       });

        $("#LastName").on("input", function() {
            var fullName = $("#FirstName").val() + ' ' + $("#LastName").val()
            $("#lbl_FullName").text(fullName)
            $("#AccountTitle").val(fullName)
         });

        //function OnTextChangeStaffName()
        //{
        //    var txt_Name = document.getElementById("FirstName");
        //    var txt_LtName = document.getElementById("LastName");
        //    var lbl_Name = document.getElementById("lbl_FullName");

        //    var full_Name = txt_Name.value + ' ' + txt_LtName.value;
        //    lbl_Name.textContent = full_Name;

        //    //lbl_Name.textContent($("#FirstName").val() + ' ' + $("#LastName").val())
        //}

        function onchangeDesignation() {
            var ddl_design = document.getElementById("DesignationId");
            var lbl_Design = document.getElementById("lbl_Designation")

            var selectedOption = ddl_design.options[ddl_design.selectedIndex];
            lbl_Design.textContent = selectedOption.text;
        }

        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#viewUserImage').attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        function AccountLoginControls() 
        {
            var chk_AccountLogin = document.getElementById('chk_AccountLoginSwitch');
            var txt_Email = document.getElementById('txt_OfficialEmailAddress');
            var txt_Pass = document.getElementById('txt_OfficialEmailPassword');
            var chk_EmailNotification = document.getElementById('chk_EmailNotification');

            if (chk_AccountLogin.checked) 
            {
                txt_Email.disabled = false;
                txt_Pass.disabled = false;
                chk_EmailNotification.disabled = false;
            }
            else 
            {
                txt_Email.disabled = true;
                txt_Pass.disabled = true;
                chk_EmailNotification.disabled = true;
            }
        }

        function StaffStatusChange() {
            var chk_StaffStatus = document.getElementById("Status");
            var lbl_StaffStatus = document.getElementById("lbl_StaffStatus");

            if (chk_StaffStatus.checked) {
                lbl_StaffStatus.textContent = "Active";
            }
            else {
                lbl_StaffStatus.textContent = "In Active";
            }
        }

        function AddStaffAtachmentData(ThisRowID, FromDocumentDotReady) 
        {
         
            var dtDetailInfoHtml;
            var totalNullAccountsCount = 0;

            if (FromDocumentDotReady != true) 
            {
                if (document.getElementById("DocumentTitle_" + ThisRowID).value == '') 
                {
                    //message empty
                    $.growl.warning({
                        message: "Please Enter Document Title !"
                    });
                    return false;
                }
            }

            var insertrow = true;

            $("#TBodyID1 tr").each(function () {
                if (document.getElementById("DocFile_" + $(this).prop('id')).value == 0) {
                    totalNullAccountsCount++;
                    $.growl.warning({
                        message: "Please Attach File!"
                    });
                    insertrow = false;
                }
            });

            if (insertrow) 
            {
                if (totalNullAccountsCount < 1) 
                {
                    if (FromDocumentDotReady != true) 
                    {
                        document.getElementById("AttachmentDetailRowNo").value = $('#TBodyID1 tr:last').attr('id');
                        document.getElementById("AttachmentDetailRowNo").value++;
                    }
                    else 
                    {
                        document.getElementById("AttachmentDetailRowNo").value = 0
                    }
                }

                var q = document.getElementById("AttachmentDetailRowNo").value;
                var i = parseInt(q) + 1;

                dtDetailInfoHtml = '';
                dtDetailInfoHtml = '<tr id="' + document.getElementById("AttachmentDetailRowNo").value + '">';
                dtDetailInfoHtml += '   <td> ' + i + ' </td>';
                dtDetailInfoHtml += '   <td> <input type="text" class="form-control" id="DocumentTitle_' + document.getElementById("AttachmentDetailRowNo").value + '" name="DocumentTitle" /> </td>';
                dtDetailInfoHtml += '   <td> <input type="file" class="form-control Attachmentch" id="DocFile_' + document.getElementById("AttachmentDetailRowNo").value + '" name="DocFiles" /> </td>';
                dtDetailInfoHtml += '   <td> <button type="button" style="" class="btn btn-info btn-xs btn-circle" id="detailDocDataAdd_' + document.getElementById("AttachmentDetailRowNo").value +
                    '        " value="+" onclick="AddStaffAtachmentData($(this).parent().parent().attr(\'id\'),false)" title="Add"> <span class="fa fa-plus" aria-hidden="true"> </span> <span><strong></strong></span> </button>';
                dtDetailInfoHtml += '       <button type="button" id = "detailDocDataDelete_' + document.getElementById("AttachmentDetailRowNo").value + '" title="Remove" value=" - " onclick="DeleteDocDetailData(this, $(this).parent().parent().attr(\'id\'))" class="btn btn-danger btn-xs btn-circle userDellbtn"> <span class="fa fa-trash" aria-hidden="true"></span> <span><strong></strong></span>  </button>  </td>';
                dtDetailInfoHtml += '</tr>';
                $("#TBodyID1").append(dtDetailInfoHtml);

                //console.log(dtDetailInfoHtml);
                ///	document.getElementById("DocImagePath_" + document.getElementById("AttachmentDetailRowNo").value);
                $('#documentTable tbody tr').each(function (index) {
                    $(this).find('td:first').text(index + 1);
                });
            }
        }

        // for delete snap button
        function DeleteDocDetailData(element, rowid) {
            var Next = $(element).parent().parent().next("tr").length;
            var Prev = $(element).parent().parent().prev("tr").length;

            if (parseInt(Next) > 0 || parseInt(Prev) > 0) {
                $(element).parent().parent().remove();
            }
            else {
                $("#TBodyID1 tr").remove();
                AddStaffAtachmentData(0, true);
            }

            $('#documentTable tbody tr').each(function (index) {
                $(this).find('td:first').text(index + 1);
            });
        }

        function SalaryExceedLimit(category) {
            debugger
            var grossSalary = parseFloat($('#SalaryAmount').val());
            var isExceed = false;
            var totalEarning = 0.0;

            if(category == 'Earning')
            {
                $("#EarningTableBody tr").each(function (index) {
                
                    var EarningAmount = $("#ComponentAmount_" + index + category).val()
                    if (!isNaN(EarningAmount) && EarningAmount != '' && EarningAmount != null) 
                    {
                        //Calculate Total Amount
                        totalEarning += parseFloat(EarningAmount)
                        $("#lbl_Earning").text(totalEarning.toLocaleString());
                        
                        //Calculate Percentage
                        var PercentageValue = $("#PercentageValue_" + index + category).val()
                        if(!isNaN(PercentageValue) && PercentageValue != '' && PercentageValue != null)
                        {
                            PercentageValue = EarningAmount * 100 / grossSalary
                            $("#PercentageValue_" + index + category).val(PercentageValue)
                        }
                        isExceed = true
                    } 
                });
            }
            console.log("totalEarning: " + totalEarning)
            //Check Gross Salary Exceed Limit
            if (totalEarning > grossSalary) 
            {
                $.growl.warning({
                    message: "Please Adjust Salary Details according to Gross Salary!"
                });
                isExceed = false
            }
            console.log("SalaryExceedLimit: " + isExceed)
            return isExceed
        }

        function SalaryPercentageExceedLimit(category) 
        {
            debugger
            var grossSalary = parseFloat($('#SalaryAmount').val());
            var isExceed = false
            var totalEarning = 0.0
            var totalEarningPercentage = 0.0

            if(category == 'Earning')
            {
                $("#EarningTableBody tr").each(function (index) {

                    var EarningPercentage = $("#PercentageValue_" + index + category).val()
                    if (!isNaN(EarningPercentage) && EarningPercentage != '' && EarningPercentage != null && EarningPercentage <= 100.0) 
                    {
                        //Calculate Total Amount
                        totalEarningPercentage += parseFloat(EarningPercentage)
                        //Calculate Earning Amount
                        var EarningAmount = $("#ComponentAmount_" + index + category).val()
                        if(!isNaN(EarningAmount) && EarningAmount != '' && EarningAmount != null)
                        {
                            EarningAmount = EarningPercentage * grossSalary / 100
                            $("#ComponentAmount_" + index + category).val(EarningAmount)
                            //Calculate Total Amount
                            totalEarning += parseFloat(EarningAmount)
                            $("#lbl_Earning").text(totalEarning.toLocaleString());
                        }
                        isExceed = true
                    } 
                });
            }
            debugger
            //Check Gross Salary Exceed Limit
            var totalEarningPercentageRounded = (Math.round(totalEarningPercentage * 10) / 10).toFixed(1);
            console.log(totalEarningPercentageRounded)
            if (totalEarningPercentageRounded > 100) {
                $.growl.warning({
                    message: "Please Adjust Salary Percentage, it should not more than 100%!"
                });
                isExceed = false
            }

            //Check Gross Salary Exceed Limit
            if (totalEarning > grossSalary) 
            {
                $.growl.warning({
                    message: "Please Adjust Salary Details according to Gross Salary!"
                });
                isExceed = false
            }
            console.log("SalaryPercentageExceedLimit: " + isExceed)
            return isExceed
        }

        function LeaveExceedLimit(id)
        {
            var isExceed = false;
            var leaveslimit = parseInt($("#NoOfLeavesLimit_"+id).val());
            var allowedleaves = parseInt($("#AllowedLeaves_"+id).val());

            //Check Leave Exceed Limit
            if (allowedleaves > leaveslimit) 
            {
                $("#AllowedLeaves_" + id).val(0);
                $.growl.warning({
                    message: "Please Adjust Leaves according to Max Limit!"
                });
                isExceed = true
            }
        }

        $("#PresentAddress").on("textarea", function () {
            validateInput($(this));
        });

        $("#FirstName, #LastName, #NationalIdnumber, #FatherName, #ContactNumber1, #EmergencyContact1, #RegistrationNo ").on("input", function () {
            validateInput($(this));
        });

        function validateInput(input) 
        {
            //alreadyExist();
            console.log(input)
            if (input[0].checkValidity()) 
            {
                input.removeClass("is-invalid");
                //input.addClass("is-valid"); //is-valid state-valid
                //input.addClass("state-valid");
                //input.next(".invalid-feedback").hide();
            } else 
            {
                input.removeClass("is-valid");
                input.addClass("is-invalid");
                input.addClass("state-valid");
                //input.next(".invalid-feedback").show();
            }
        }

        function validateForm() 
        {
            debugger
            console.log("validateForm:open")
            var form = $("#myform");
            var inputs = form.find("input:required");
            var textareaInputs = form.find("textarea:required");

            inputs.each(function () {
                validateInput($(this));
            });

            textareaInputs.each(function () {
                validateInput($(this));
            });
            debugger
            if (customValidation() && form[0].checkValidity() ) {
                debugger
                console.log("Form is valid");
                // Submit the form or perform other actions here
                return true;
            } else {
                console.log("Form is invalid");
                return false;
            }
            console.log("validateForm:end")
            //form.addClass("was-validated");
        }

        function customValidation()
        {
            var isvalid = true;
            isvalid = alreadyExist();

            if ($("#DepartmentId").val() == null || $("#DepartmentId").val() == '')
            {
                $.growl.warning({
                    message: "Please Select Department!"
                });
                isvalid = false;
            }

            if ($("#DesignationId").val() == null || $("#DesignationId").val() == '') 
            {
                $.growl.warning({
                    message: "Please Select Designation!"
                });
                isvalid = false;
            }
            console.log("customValidation Department & Designation: " + isvalid)
            return isvalid;
       }

       	function alreadyExist() {
			var status =false
            var Data = {   id:$("#StaffId").val(), NationalIdnumber: $("#NationalIdnumber").val() }
			console.log(Data)
			
            $.ajax({
				async: false,
				url: "/Staff/StaffAlreadyExists",
				type: "GET",
				data: Data,
				success: function (data) {
					if (data != "") 
                    {
					
						//var b = JSON.parse(data)
						if (data.success)
                        {
							$.growl.warning({
                                message: data.message
							});
			            	$("#NationalIdnumber").addClass("is-invalid");
							status= false;
						}
						else
						{
			            	$("#NationalIdnumber").removeClass("is-invalid");
							status= true;
						}
					}
				},
				error: function () 
                {
					status= false;	
				}
			})
		    return status;
		}

    </script>
}


